on: [push, pull_request]

jobs:
  test:
    runs-on: ubuntu-latest
    env:
        BADGE_PATH: .github/badges/open-pr-count.svg
        DEPENDS_BADGE_PATH: .github/badges/depend-badge.svg
        CC_BADGE_PATH: .github/badges/jacoco-code-coverage.svg
        RELEASE_PATH: .github/badges/release.svg
        VV_BADGE_PATH: .github/badges/vv-code-count.svg
    name: A job to test this action
    steps:
    - uses: actions/checkout@v1
    - uses: fregante/setup-git-token@v1
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Run Tests
      run: ./gradlew clean test jacocoTestReport -i
      if: ${{ true }}

    - name: Generate JaCoCo Badge
      id: jacoco
      if: ${{ true }}
      uses: cicirello/jacoco-badge-generator@v2.1.0
      with:
          generate-branches-badge: true
          jacoco-csv-file: build/reports/tests/test/jacocoTestReport.csv
          
    - name: Get 7 days past date
      id: date
      run: 
       echo "::set-output name=date::$(date -d "7 days ago" +%Y-%m-%d)"
      
    - name: Generate a PR OPEN COUNT
      id: open_pr_count
      run: |
        # Generates a GitHub Workflow output named `lines`
        export PR_COUNT=`curl -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" -H "User-Agent *" -H "Accept: application/vnd.github.v3+json" -s  https://api.github.com/search/issues?q=repo:${{ github.repository }}++is:open+is:pr+created:%3E%3D${{ steps.date.outputs.date }} | jq '.items | length'`
        echo "##[set-output name=prCount;]${PR_COUNT}"

        echo "Open PR Count = ${PR_COUNT}"
       
        # Create the directory where badge will be saved, if needed
        mkdir -p "${{ env.BADGE_PATH }}%/*"
       
    - name: Generate a Vera code Severity Count
      id: open_vvcode_count
      run: |
        # Generates a GitHub Workflow output named `vvCount`
        export VV_COUNT=`curl -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" -H "User-Agent *" -H "Accept: application/vnd.github.v3+json" -s  https://api.github.com/search/issues?q=repo:${{ github.repository }}++is:open+is:issue+created:%3E%3D${{ steps.date.outputs.date }} | jq --raw-output '[[.items[] | .title | capture("(?<Sev>Severity [0-9]+)") | if .Sev == "Severity 4" then .Sev="Very High" elif .Sev == "Severity 3" then .Sev="High" else "many" end ] | group_by(.Sev)[] | {Key: "\(.[0].Sev):\(length)"}] | map(.Key) | join(",")'`
        echo "##[set-output name=vvCount;]${VV_COUNT}"

        echo "Vere Code Count = ${VV_COUNT}"
       
        # Create the directory where vera code badge will be saved, if needed
        mkdir -p "${{ env.VV_BADGE_PATH }}%/*"
        
    - name: Generate a dependencies count
      id: dependencies_count
      run: |
        export COUNT=`curl -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" -H "User-Agent *" -H "Accept: application/vnd.github.v3+json" -s  https://api.github.com/search/issues?q=is:open%20is:pr%20repo:${{ github.repository }}%20label:dependencies | jq .total_count`
        echo "${COUNT}"
        export DEPENDENCIES=`[ ${COUNT} -gt 0 ] && echo "${COUNT} out of date" || echo "up to date"`
        export DEPENDENCIES_COLOR=`[ ${COUNT} -gt 0 ] && echo "red" || echo "green"`
        echo "${DEPENDENCIES}"
        echo "${DEPENDENCIES_COLOR}"
        echo "##[set-output name=depends;]${DEPENDENCIES}"
        echo "##[set-output name=dependscolor;]${DEPENDENCIES_COLOR}"
        
        echo "Dependencies Count = ${COUNT}"
        
        # Create the directory where badges will be saved, if needed
        mkdir -p "${{ env.DEPENDS_BADGE_PATH }}%/*"
        
    - name: Generate a coverage
      if: ${{ true }}
      id: code_coverage
      env:
          JACOCO_COVERAGE: ${{ steps.jacoco.outputs.coverage }}
      run: |
        #export COVERAGE_PERCENTAGE=`printf "%.2f" '${{ steps.jacoco.outputs.coverage }}'`
        export INTERIM_COVERAGE_PERCENTAGE=`echo ${{ steps.jacoco.outputs.coverage }} \* 100 | bc -l`
        export COVERAGE_PERCENTAGE=`printf "%.0f" ${INTERIM_COVERAGE_PERCENTAGE}`
        echo "coverage = ${COVERAGE_PERCENTAGE}"
        echo "##[set-output name=codeCoverage;]${COVERAGE_PERCENTAGE} %"
        # Create the directory where badges will be saved, if needed
        mkdir -p "${{ env.CC_BADGE_PATH }}%/*"
        
    - name: Get latest release details
      id: release
      run: |
        # Generates a GitHub Workflow output named `releaseName`
        export RELEASE_NAME=`curl -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" -H "User-Agent *" -H "Accept: application/vnd.github.v3+json" -s  https://api.github.com/repos/${{ github.repository }}/releases/latest | jq -r .name`
        echo "##[set-output name=releaseName;]${RELEASE_NAME}"
        export RELEASE=`echo "Release: ${RELEASE_NAME} "`
        export RELEASE_COLOR=`echo "green"`
        echo "Latest Release name = ${RELEASE_NAME}"
        echo "##[set-output name=depends;]${RELEASE}"
        echo "##[set-output name=dependscolor;]${RELEASE_COLOR}"
        
        # Create the directory where issue badge will be saved, if needed
        mkdir -p "${{ env.RELEASE_PATH }}%/*"
        
    # Use the output from the `open_pr_count` step
    - name: Generate the Open PR count badge SVG image
      uses: emibcn/badge-action@v1
      id: badge
      with:
        label: 'Open Pull Requests'
        status: ${{ steps.open_pr_count.outputs.prCount }}
        color: 'blue,555,daf'
        path: ${{ env.BADGE_PATH }}
        
    # Use the output from the `open_vvcode_count` step
    - name: Generate the Vera code count badge SVG image
      uses: emibcn/badge-action@v1
      id: vvbadge
      with:
        label: 'Vera Code Count'
        status: ${{ steps.open_vvcode_count.outputs.vvCount }}
        color: 'blue,555,daf'
        path: ${{ env.VV_BADGE_PATH }}

    # Use the output from the 'jacoco' step
    - name: Generate the Code Coverage badge SVG image
      if: ${{ true }}
      uses: emibcn/badge-action@v1
      id: badgeJJ
      with:
        label: 'JACOCO Code Coverage'
        status: ${{ steps.code_coverage.outputs.codeCoverage }}
        color: 'blue,555,daf'
        path: ${{ env.CC_BADGE_PATH }}
 
    - name: Generate the dependencies badge SVG image
      uses: emibcn/badge-action@v1
      id: deps
      with:
        label: 'dependencies'
        status: ${{ steps.dependencies_count.outputs.depends }}
        color: ${{ steps.dependencies_count.outputs.dependscolor }}
        path: ${{ env.DEPENDS_BADGE_PATH }}
    
    - name: Generate release badge SVG image
      uses: emibcn/badge-action@v1
      id: releaseBadge
      with:
        label: 'Latest Release'
        status: ${{ steps.release.outputs.releaseName }}
        color: 'blue,555,daf'
        path: ${{ env.RELEASE_PATH }}
       
    - name: Upload pr count badge as artifact
      uses: actions/upload-artifact@v2
      with:
        name: badge
        path: ${{ env.BADGE_PATH }}
        if-no-files-found: error
        
    - name: Upload vera code count badge as artifact
      uses: actions/upload-artifact@v2
      with:
        name: badge
        path: ${{ env.VV_BADGE_PATH }}
        if-no-files-found: error
        
    - name: Upload dependices badge as artifact
      uses: actions/upload-artifact@v2
      with:
        name: badge
        path: ${{ env.DEPENDS_BADGE_PATH }}
        if-no-files-found: error

    - name: Upload jacoco badge as artifact
      if: ${{ true }}
      uses: actions/upload-artifact@v2
      with:
        name: badge
        path: ${{ env.CC_BADGE_PATH }}
        if-no-files-found: error
        
    - name: Upload release badge as artifact
      uses: actions/upload-artifact@v2
      with:
        name: badge
        path: ${{ env.RELEASE_PATH }}
        if-no-files-found: error
        
    - name: Extract branch name
      shell: bash
      run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
      id: extract_branch
    - name: Commit badge
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add "${{ env.BADGE_PATH }}"
        git add "${{ env.VV_BADGE_PATH }}"
        git add "${{ env.DEPENDS_BADGE_PATH }}"
        git add "${{ env.CC_BADGE_PATH }}"
        git add "${{ env.RELEASE_PATH }}"
        git commit -m "Add/Update badges" || true
    - name: Push badge commit
      uses: ad-m/github-push-action@master
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        branch: ${{ steps.extract_branch.outputs.branch }}
